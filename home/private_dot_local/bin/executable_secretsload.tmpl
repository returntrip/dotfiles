load_secrets() {
    # Check if BWS_ACCESS_TOKEN is set
    if [[ -z "$BWS_ACCESS_TOKEN" ]]; then
        echo "Error: Bitwarden Secrets token not found."
        return 1
    fi

    # Create a temporary directory for storing secrets
    temp_dir=$(mktemp -d)
    if [[ ! -d "$temp_dir" ]]; then
        echo "Error: Failed to create temporary directory."
        return 1
    fi

    age_pubkey_value=$(bws secret get a9f85c2b-8964-4620-8830-b2b7015b6234 2>/dev/null)
    age_privkey_value=$(bws secret get 42bbf7d6-dc2f-47ab-b76e-b2b7015b8c2f 2>/dev/null)
    
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to retrieve secrets."
        return 1
    fi

    AGE_PRIVATE_KEY=$(echo "$age_privkey_value" | jq -r .value)
    AGE_PUBLIC_KEY=$(echo "$age_pubkey_value" | jq -r .value)

    if [[ -z "$AGE_PRIVATE_KEY" || -z "$AGE_PUBLIC_KEY" ]]; then
        echo "Error: One or more secrets are empty."
        return 1
    fi

    # Store the secrets in the temporary directory
    age_private_key="$temp_dir/.age_private_key"
    {
        echo "$AGE_PRIVATE_KEY"
    } > "$age_private_key"

    secret_file="$temp_dir/.secrets_exports"
    {
        echo "export SOPS_AGE_KEY='$AGE_PRIVATE_KEY'"
        echo "export AGE_PUBLIC_KEY='$AGE_PUBLIC_KEY'"
        echo "export AGE_PRIVATE_KEY='$age_private_key'"
    } > "$secret_file"

    echo "Secrets loaded"

    # Source the secrets
    source "$secret_file"
}
